using System.Runtime.InteropServices;
using System.Windows.Forms;
using System;
using System.Diagnostics;
using System.Net.Http;
using System.Threading.Tasks;
using System.Linq;
using System.Diagnostics.Eventing.Reader;
using System.Management; // Add via Project > Add Reference if needed
using System.Timers;
using Timer = System.Windows.Forms.Timer;
using System.Net.NetworkInformation;



namespace Knox
{






    public partial class ModMenu : Form
    {
        private Timer updateTimer;
        private System.Windows.Forms.Timer rainbowTimer;
        private int hue = 0;

        //===================================================Privates=================================================================================
        // WinAPI constants and delegates
        private delegate IntPtr LowLevelKeyboardProc(int nCode, IntPtr wParam, IntPtr lParam);
        private static LowLevelKeyboardProc _proc;
        private static IntPtr _hookID = IntPtr.Zero;

        private const int WH_KEYBOARD_LL = 13;
        private const int WM_KEYDOWN = 0x0100;


        //Check for Knox being disabled
        private System.Windows.Forms.Timer knoxCheckTimer;

        //Check for users being logged out
        private System.Windows.Forms.Timer loginValidationTimer;




        //==============================================================DLL imports==================================================================
        [DllImport("user32.dll")]
        public static extern bool ReleaseCapture();

        [DllImport("user32.dll")]
        public static extern int SendMessage(IntPtr hWnd, int Msg, int wParam, int lParam);

        public const int WM_NCLBUTTONDOWN = 0xA1;
        public const int HTCAPTION = 0x2;

        [DllImport("user32.dll")]
        private static extern IntPtr SetWindowsHookEx(int idHook, LowLevelKeyboardProc lpfn, IntPtr hMod, uint dwThreadId);

        [DllImport("user32.dll")]
        private static extern bool UnhookWindowsHookEx(IntPtr hhk);

        [DllImport("user32.dll")]
        private static extern IntPtr CallNextHookEx(IntPtr hhk, int nCode, IntPtr wParam, IntPtr lParam);

        [DllImport("kernel32.dll")]
        private static extern IntPtr GetModuleHandle(string lpModuleName);

        private System.Windows.Forms.Timer networkCheckTimer;//Network connection checker



        //================================================================MAIN========================================================================
        public ModMenu()
        {
            InitializeComponent();

            //To be able to drag menu across screen from top bar
            EnableDrag(menubar);
            EnableDrag(knoxlogo);
            EnableDrag(currentuserlabel);
            EnableDrag(currentuser);

            //Stuff for ESC toggle
            _proc = HookCallback;
            _hookID = SetHook(_proc);

            // Start checking after the form loads for Knox being disabled
            knoxCheckTimer = new System.Windows.Forms.Timer();
            knoxCheckTimer.Interval = 1000;//check every second
            knoxCheckTimer.Tick += async (s, e) => await CheckKnoxStatus();
            knoxCheckTimer.Start();

            //Checks for users being logged out every half-second
            loginValidationTimer = new System.Windows.Forms.Timer();
            loginValidationTimer.Interval = 500; //checks every half second
            loginValidationTimer.Tick += async (s, e) => await ValidateKnoxLoginAsync();
            loginValidationTimer.Start();

            //Alt+A Aimbot toggle code
          

        }




        //================================================Knox Remote Disable Feature==========================================================
        private async Task CheckKnoxStatus()
        {
            string url = "https://raw.githubusercontent.com/Topian/fhc/refs/heads/main/KnoxDisable";

            try
            {
                using (HttpClient client = new HttpClient())
                {
                    string result = await client.GetStringAsync(url);
                    if (result.Trim().ToLower() == "true")
                    {
                        knoxCheckTimer.Stop(); // stop further checks

                        cheatscreen.Visible = false;


                        await Task.Delay(1000); // wait 1 second

                        MessageBox.Show("Knox has been temporarily disabled. Please check back later.");

                        await Task.Delay(3000); // wait 3 seconds

                        Application.Exit();
                    }
                }
            }
            catch (Exception ex)
            {
                // Optionally log or show the error
                Console.WriteLine("Error checking Knox status: " + ex.Message);
            }
        }







        //==================================================Knox User Logout Feature code===============================================================
        private async Task ValidateKnoxLoginAsync()
        {
            if (!cheatscreen.Visible) return;

            string userUrl = "https://raw.githubusercontent.com/Topian/fhc/refs/heads/main/KnoxUser";
            string passUrl = "https://raw.githubusercontent.com/Topian/fhc/refs/heads/main/KnoxPass";

            try
            {
                using (HttpClient client = new HttpClient())
                {
                    string[] validUsers = (await client.GetStringAsync(userUrl))
                                          .Split(new[] { '\r', '\n' }, StringSplitOptions.RemoveEmptyEntries)
                                          .Select(u => u.Trim().ToLower())
                                          .ToArray();

                    string[] validPasses = (await client.GetStringAsync(passUrl))
                                           .Split(new[] { '\r', '\n' }, StringSplitOptions.RemoveEmptyEntries)
                                           .Select(p => p.Trim())
                                           .ToArray();

                    string currentUser = usernamebox.Text.Trim().ToLower();
                    string currentPass = passwordbox.Text.Trim();

                    bool usernameMatches = validUsers.Contains(currentUser);
                    bool passwordMatches = validPasses.Contains(currentPass);

                    // Logout if either is invalid
                    if (!usernameMatches || !passwordMatches)
                    {
                        loginValidationTimer.Stop();
                        cheatscreen.Visible = false;

                        await Task.Delay(2000); //Wait 2 seconds

                        loginscreen.Visible = true;
                        passwordbox.Text = "";
                        usernamebox.Text = "";

                        MessageBox.Show("Your Knox Login is no longer valid. Please use a different login.");
                    }
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine("Login check failed: " + ex.Message);
            }
        }









        //==============================================================ESC Toggle Code=================================================================

        private static IntPtr SetHook(LowLevelKeyboardProc proc)
        {
            using (Process curProcess = Process.GetCurrentProcess())
            using (ProcessModule curModule = curProcess.MainModule)
            {
                return SetWindowsHookEx(WH_KEYBOARD_LL, proc, GetModuleHandle(curModule.ModuleName), 0);
            }
        }

        private IntPtr HookCallback(int nCode, IntPtr wParam, IntPtr lParam)
        {
            if (nCode >= 0 && wParam == (IntPtr)WM_KEYDOWN)
            {
                int vkCode = Marshal.ReadInt32(lParam);
                if ((Keys)vkCode == Keys.Escape)
                {
                    this.Invoke((MethodInvoker)delegate
                    {
                        if (this.WindowState == FormWindowState.Minimized)
                        {
                            this.WindowState = FormWindowState.Normal;
                            this.Show();
                            this.Activate();
                        }
                        else
                        {
                            this.WindowState = FormWindowState.Minimized;
                        }

                        
                    });
                }
            }
            return CallNextHookEx(_hookID, nCode, wParam, lParam);

            //Alt Aimbot toggle code

            

        }

        protected override void OnFormClosing(FormClosingEventArgs e)
        {
          
            UnhookWindowsHookEx(_hookID);
            base.OnFormClosing(e);
        }

        //============================================================================================================================================







        //+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
        //==========================================================MODMENU_LOAD=============================================================================
        //+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    

        private async void ModMenu_Load(object sender, EventArgs e)
        {
            loginsuccesslabel.Hide();
            loadingloginlabel.Hide();
            invalidpasswordlabel.Hide();
            invalidusernamelabel.Hide();
            invaliduserandpasslabel.Hide();
            startknoxbutton.Hide();
            restartbutton.Hide();
            backbutton.Hide();
            cheatscreen.Hide();
            loginscreen.Hide();
            legitaimbotbutton.Enabled = false;
            extremeaimbotbutton.Enabled = false;
            headonlyaimbotbutton.Enabled = false;
            bodyonlyaimbotbutton.Enabled = false;
            closesttocrosshairaimbotbutton.Enabled = false;


            playerboxopacitytrackbar.Minimum = 0;  // Set your desired range
            playerboxopacitytrackbar.Maximum = 100;
            playerboxopacitytrackbar.Value = 50;   // Start in the middle
            opacitytextlabel.Text = playerboxopacitytrackbar.Value.ToString();

            playerboxopacitytrackbar.Scroll += TrackBar1_Scroll;


            passwordbox.KeyDown += passwordbox_KeyDown; //Press Enter while in password box to activate the Login button (because I'm Lazy)



            //Aim Input Detection
            DetectInputDevices(); // Initial detection

            // Watch for device insertion
            deviceInsertedWatcher = new ManagementEventWatcher(
                new WqlEventQuery("SELECT * FROM __InstanceCreationEvent WITHIN 1 WHERE TargetInstance ISA 'Win32_PnPEntity'")
            );
            deviceInsertedWatcher.EventArrived += DeviceInsertedWatcher_EventArrived;
            deviceInsertedWatcher.Start();

            // Watch for device removal
            deviceRemovedWatcher = new ManagementEventWatcher(
                new WqlEventQuery("SELECT * FROM __InstanceDeletionEvent WITHIN 1 WHERE TargetInstance ISA 'Win32_PnPEntity'")
            );
            deviceRemovedWatcher.EventArrived += DeviceRemovedWatcher_EventArrived;
            deviceRemovedWatcher.Start();

           
            
            //Check for Updates
            updateTimer = new Timer();
            updateTimer.Interval = 500; //Every split second
            updateTimer.Tick += async (s, args) => await CheckForUpdate();
            updateTimer.Start();

            //wait 2 seconds
            await Task.Delay(2000);
            if(updatechecklabel.ForeColor == Color.Blue)
            {
                //Essentially do Nothing because the buttons are already hidden.
            }
            else
            {
                startknoxbutton.Show();
                restartbutton.Show();
                backbutton.Show();
            }

            //Detect Network connection
            // One-time check at startup
            if (!NetworkInterface.GetIsNetworkAvailable())
            {
                MessageBox.Show("No Network Connection Detected. You can only use Knox on an Internet Connection. Please connect to Internet and try again.");
                Application.Exit();
                return;
            }

            // Set up recurring check
            networkCheckTimer = new System.Windows.Forms.Timer();
            networkCheckTimer.Interval = 10; //Checks realy fast lol
            networkCheckTimer.Tick += NetworkCheckTimer_Tick;
            networkCheckTimer.Start();

            //Rainbow background flashing
            rainbowTimer = new System.Windows.Forms.Timer();
            rainbowTimer.Interval = 50; // Speed of color change (lower = faster)
            rainbowTimer.Tick += RainbowTimer_Tick;
            rainbowTimer.Start();


        }


        //==========================================================================================================================================









        //===============================================Rainbow Background Code====================================================================
        private void RainbowTimer_Tick(object sender, EventArgs e)
        {
            this.BackColor = ColorFromHSV(hue, 1.0, 1.0); // Full saturation & brightness
            hue = (hue + 5) % 360; // Rotate hue (wraps at 360)
        }

        public static Color ColorFromHSV(double hue, double saturation, double value)
        {
            int hi = Convert.ToInt32(Math.Floor(hue / 60)) % 6;
            double f = hue / 60 - Math.Floor(hue / 60);

            value = value * 255;
            int v = Convert.ToInt32(value);
            int p = Convert.ToInt32(value * (1 - saturation));
            int q = Convert.ToInt32(value * (1 - f * saturation));
            int t = Convert.ToInt32(value * (1 - (1 - f) * saturation));

            return hi switch
            {
                0 => Color.FromArgb(255, v, t, p),
                1 => Color.FromArgb(255, q, v, p),
                2 => Color.FromArgb(255, p, v, t),
                3 => Color.FromArgb(255, p, q, v),
                4 => Color.FromArgb(255, t, p, v),
                _ => Color.FromArgb(255, v, p, q),
            };
        }

        //===========================================================================================================================================







        //================================================Network Connection Checker================================================================
        private void NetworkCheckTimer_Tick(object sender, EventArgs e)
        {
            if (!NetworkInterface.GetIsNetworkAvailable())
            {
                networkCheckTimer.Stop(); // Stop checking once offline
                MessageBox.Show("Network connection lost. Knox will now close.");
                Application.Exit();
            }
        }
        //=========================================================================================================================================


        //========================================================Update Check=====================================================================
        private async Task CheckForUpdate()
        {
            try
            {
                using (HttpClient client = new HttpClient())
                {
                    string url = "https://raw.githubusercontent.com/Topian/fhc/refs/heads/main/KnoxUpdates";
                    string result = await client.GetStringAsync(url);
                    if (result.Trim().ToLower() != "false")
                    {
                        updateTimer.Stop(); // Optional: stop checking after notifying
                        startknoxbutton.Hide();
                        examplestartbutton.Hide();
                        backbutton.Hide();
                        restartbutton.Hide();

                        welcomescreen.Text = "              Please Download the New Version\r\n                      of Knox in the Discord!\r\n";
                        updatechecklabel.Text = "UPDATE AVAILABLE!";
                        updatechecklabel.ForeColor = Color.Blue;
                        MessageBox.Show("Knox Has an Update Available! Please Install the newest Version.");

                    }
                }
            }
            catch (Exception ex)
            {
                // Optional: silently fail or log the error
                Console.WriteLine("Update check failed: " + ex.Message);
            }
        }
        //==========================================================================================================================================





        //==================================================================Aim Input Detection=====================================================
        private ManagementEventWatcher deviceInsertedWatcher;
        private ManagementEventWatcher deviceRemovedWatcher;

        private void DeviceInsertedWatcher_EventArrived(object sender, EventArrivedEventArgs e)
        {
            if (this.InvokeRequired)
            {
                this.Invoke(new MethodInvoker(() => DetectInputDevices()));
            }
            else
            {
                DetectInputDevices();
            }
        }

        private void DeviceRemovedWatcher_EventArrived(object sender, EventArrivedEventArgs e)
        {
            if (this.InvokeRequired)
            {
                this.Invoke(new MethodInvoker(() => DetectInputDevices()));
            }
            else
            {
                DetectInputDevices();
            }
        }

        private void DetectInputDevices()
        {
            aiminputdevicedropdownbox.Items.Clear();
            aiminputdevicedropdownbox.Items.Add("Select input device...");

            try
            {
                ManagementObjectSearcher searcher = new ManagementObjectSearcher("SELECT * FROM Win32_PnPEntity");
                foreach (ManagementObject device in searcher.Get())
                {
                    string name = device["Name"]?.ToString() ?? "";
                    if (name.ToLower().Contains("xbox") || name.ToLower().Contains("controller") ||
                        name.ToLower().Contains("mouse") || name.ToLower().Contains("mouse") ||
    name.ToLower().Contains("dualshock") || name.ToLower().Contains("dualsense") ||
    name.ToLower().Contains("playstation") || name.ToLower().Contains("sony"))
                    {
                        aiminputdevicedropdownbox.Items.Add("Input: " + name);
                    }


                }

                // Set index to 0 so "Select input device..." is shown
                aiminputdevicedropdownbox.SelectedIndex = 0;
                inputdevicelabel.Text = "No device selected";
            }
            catch (Exception ex)
            {
                MessageBox.Show("Error detecting devices: " + ex.Message);
            }
        }

        private void ModMenu_FormClosing(object sender, FormClosingEventArgs e)
        {
            if (deviceInsertedWatcher != null)
                deviceInsertedWatcher.Stop();

            if (deviceRemovedWatcher != null)
                deviceRemovedWatcher.Stop();
        }

        


        //================================================================================================================================================








        //=========================================================Settings Bar All Code==================================================================


        private void EnableDrag(Control control)
        {
            control.MouseDown += (s, e) =>
            {
                if (e.Button == MouseButtons.Left)
                {
                    ReleaseCapture();
                    SendMessage(this.Handle, WM_NCLBUTTONDOWN, HTCAPTION, 0);
                }
            };
        }

        private void exitbutton_Click(object sender, EventArgs e)
        {
            Application.Exit();
        }

        private void restartbutton_Click(object sender, EventArgs e)
        {
            Application.Restart();
        }

        private void helpbutton_Click(object sender, EventArgs e)
        {
            MessageBox.Show("*If you bought Knox, your username is your Discord username! (not display name)*\r\n*Updated Usernames and Passwords take at least 3 minutes to update in the system!*\r\n*If there is an update, please delete this version and install the new one!*\r\n*You CANNOT use Knox WITHOUT a Network Connection!*");
        }

        //=============================================================================================================================================
        //---------------------------------------------------------------ALL LOGIN SCREEN CODE---------------------------------------------------------
        //=============================================================================================================================================


        private void loginlogo_Click(object sender, EventArgs e)
        {

        }

        private void passwordbox_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter)
            {
                // Optionally prevent ding sound
                e.SuppressKeyPress = true;

                // Call the login method
                loginbutton_Click(loginbutton, EventArgs.Empty);
            }
        }

        private async void loginbutton_Click(object sender, EventArgs e)
        {
            invalidpasswordlabel.Hide();
            invalidusernamelabel.Hide();
            invaliduserandpasslabel.Hide();
            loadingloginlabel.Show();
            await Task.Delay(2000); // Wait 2 seconds
            await CheckCredentialsAsync(usernamebox.Text.Trim(), passwordbox.Text.Trim());
            loadingloginlabel.Hide();
           
        }

        private async Task CheckCredentialsAsync(string username, string password)
        {
            string userUrl = "https://raw.githubusercontent.com/Topian/fhc/refs/heads/main/KnoxUser";
            string passUrl = "https://raw.githubusercontent.com/Topian/fhc/refs/heads/main/KnoxPass";

            try
            {
                using (HttpClient client = new HttpClient())
                {
                    string[] validUsers = (await client.GetStringAsync(userUrl)).Split(new[] { '\r', '\n' }, StringSplitOptions.RemoveEmptyEntries);
                    string[] validPasses = (await client.GetStringAsync(passUrl)).Split(new[] { '\r', '\n' }, StringSplitOptions.RemoveEmptyEntries);

                    bool usernameValid = validUsers.Contains(username);
                    bool passwordValid = validPasses.Contains(password);

                    if (usernameValid && !passwordValid)
                    {
                        passwordbox.Text = "";
                        loadingloginlabel.Hide();
                        invalidpasswordlabel.Show();
                        invalidusernamelabel.Hide();
                        invaliduserandpasslabel.Hide();
                        MessageBox.Show("Invalid Password.");
                        //Wrong password, right username
                    }
                    else if (!usernameValid && passwordValid)
                    {
                        usernamebox.Text = "";
                        loadingloginlabel.Hide();
                        invalidpasswordlabel.Hide();
                        invalidusernamelabel.Show();
                        invaliduserandpasslabel.Hide();
                        MessageBox.Show("Invalid Username.");
                        //Wrong username, right password
                    }
                    else if (!usernameValid && !passwordValid)
                    {
                        passwordbox.Text = "";
                        loadingloginlabel.Hide();
                        invalidpasswordlabel.Hide();
                        invalidusernamelabel.Hide();
                        invaliduserandpasslabel.Show();
                        MessageBox.Show("Invalid Username and Password.");
                        //Wrong username and password
                    }
                    else
                    {
                        backbutton.Hide();
                        loadingloginlabel.Hide();
                        invalidpasswordlabel.Hide();
                        invalidusernamelabel.Hide();
                        invaliduserandpasslabel.Hide();
                        loginsuccesslabel.Show();
                        currentuser.Text = usernamebox.Text;
                        loadingloginlabel.Text = "Login Successful!";
                        MessageBox.Show("Welcome back " +
        usernamebox.Text + "!");
                        loginscreen.Hide();
                        cheatscreen.Focus();
                        cheatscreen.Visible = true;
                       
                        // (Login Successful)
                    }
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show("Error checking credentials:\n" + ex.Message);
            }
        }


        //=============================================================================================================================================













        //===========================================================================================================================================
        //---------------------------------------------------------------ALL CHEAT SCREEN CODE-------------------------------------------------------
        //=============================================================================================================================================


        private void aimbotonoffbutton_Click(object sender, EventArgs e)
        {
            if (aimbotonoffbutton.BackColor == Color.Green)
            {
                aimbotonoffbutton.BackColor = Color.Red;
                aimbotonoffbutton.Text = "Off";
            }
            else
            {
                aimbotonoffbutton.Text = "On";
                aimbotonoffbutton.BackColor = Color.Green;
                legitaimbotbutton.Enabled = true;
                extremeaimbotbutton.Enabled = true;
                headonlyaimbotbutton.Enabled = true;
                bodyonlyaimbotbutton.Enabled = true;
                closesttocrosshairaimbotbutton.Enabled = true;
            }

            if (aimbotonoffbutton.BackColor == Color.Red)
            {
                legitaimbotbutton.BackColor = Color.Gray;
                extremeaimbotbutton.BackColor = Color.Gray;
                headonlyaimbotbutton.BackColor = Color.Gray;
                bodyonlyaimbotbutton.BackColor = Color.Gray;
                closesttocrosshairaimbotbutton.BackColor = Color.Gray;
                legitaimbotbutton.Enabled = false;
                extremeaimbotbutton.Enabled = false;
                headonlyaimbotbutton.Enabled = false;
                bodyonlyaimbotbutton.Enabled = false;
                closesttocrosshairaimbotbutton.Enabled = false;
            }
        }

        private void legitaimbotbutton_Click(object sender, EventArgs e)
        {
            if (this.legitaimbotbutton.BackColor == Color.Green)
            {
                //Legit Aimbot OFF code here
                this.legitaimbotbutton.BackColor = Color.Gray;
                extremeaimbotbutton.Enabled = true;
            }
            else
            {
                //Legit Aimbot ON code here
                this.legitaimbotbutton.BackColor = Color.Green;
                extremeaimbotbutton.Enabled = false;
                this.extremeaimbotbutton.BackColor = Color.Gray;
            }
        }

        private void extremeaimbotbutton_Click(object sender, EventArgs e)
        {
            if (this.extremeaimbotbutton.BackColor == Color.Green)
            {
                //Extreme Aimbot OFF code here
                this.extremeaimbotbutton.BackColor = Color.Gray;
                legitaimbotbutton.Enabled = true;
            }
            else
            {
                //Extreme Aimbot ON code here
                this.extremeaimbotbutton.BackColor = Color.Green;
                legitaimbotbutton.Enabled = false;
                this.legitaimbotbutton.BackColor = Color.Gray;
                MessageBox.Show("Warning!" +
                   " This option is extremely dangerous and can cause reports that will quickly lead to a ban!" +
                    " Use at your own risk.");
            }
        }

        private void headonlyaimbotbutton_Click(object sender, EventArgs e)
        {
            if (this.headonlyaimbotbutton.BackColor == Color.Green)
            {
                //Head Only Aimbot OFF code here
                this.headonlyaimbotbutton.BackColor = Color.Gray;
                bodyonlyaimbotbutton.Enabled = true;
                closesttocrosshairaimbotbutton.Enabled = true;
            }
            else
            {
                //Head Only Aimbot ON code here
                this.headonlyaimbotbutton.BackColor = Color.Green;
                bodyonlyaimbotbutton.Enabled = false;
                closesttocrosshairaimbotbutton.Enabled = false;
                this.bodyonlyaimbotbutton.BackColor = Color.Gray;
                this.closesttocrosshairaimbotbutton.BackColor = Color.Gray;
            }
        }

        private void bodyonlyaimbotbutton_Click(object sender, EventArgs e)
        {
            if (this.bodyonlyaimbotbutton.BackColor == Color.Green)
            {
                //Body Only Aimbot OFF code here
                this.bodyonlyaimbotbutton.BackColor = Color.Gray;
                headonlyaimbotbutton.Enabled = true;
                closesttocrosshairaimbotbutton.Enabled = true;
            }
            else
            {
                //Body Only Aimbot ON code here
                this.bodyonlyaimbotbutton.BackColor = Color.Green;
                headonlyaimbotbutton.Enabled = false;
                this.headonlyaimbotbutton.BackColor = Color.Gray;
                closesttocrosshairaimbotbutton.Enabled = false;
                this.closesttocrosshairaimbotbutton.BackColor = Color.Gray;
            }
        }

        private void closesttocrosshairaimbotbutton_Click(object sender, EventArgs e)
        {
            if (this.closesttocrosshairaimbotbutton.BackColor == Color.Green)
            {
                //Closest to Crosshair Aimbot OFF code here
                this.closesttocrosshairaimbotbutton.BackColor = Color.Gray;
                headonlyaimbotbutton.Enabled = true;
                bodyonlyaimbotbutton.Enabled = true;
            }
            else
            {
                //Closest to Crosshair Aimbot ON code here
                this.closesttocrosshairaimbotbutton.BackColor = Color.Green;
                headonlyaimbotbutton.Enabled = false;
                this.headonlyaimbotbutton.BackColor = Color.Gray;
                bodyonlyaimbotbutton.Enabled = false;
                this.bodyonlyaimbotbutton.BackColor = Color.Gray;
            }
        }

        private void triggerbotcheckbox_CheckedChanged(object sender, EventArgs e)
        {
            if (triggerbotcheckbox.Checked)
            {
                //Triggerbot ON code here. (If you hold shootbutton, tiggerbot will continously press shootbutton as fast as possible until shootbutton input is released.)
                MessageBox.Show("Triggerbot is Enabled!");
            }
            else
            {
                //Triggerbot OFF code here
                MessageBox.Show("Triggerbot is Disabled!");
            }
        }

        private void showcrosshaircheckbox_CheckedChanged(object sender, EventArgs e)
        {
            if (showcrosshaircheckbox.Checked)
            {
                //Show Crosshair code here
                MessageBox.Show("Crosshair is Enabled!");
            }
            else
            {
                //Hide Crosshair code here
                MessageBox.Show("Crosshair is Disabled!");
            }
        }

        private void autodropshotcheckbox_CheckedChanged(object sender, EventArgs e)
        {
            if (autodropshotcheckbox.Checked)
            {
                autojumpshotcheckbox.Enabled = false;
                //Auto Dropshot ON code here
                MessageBox.Show("Auto Dropshot is Enabled!");
            }
            else
            {
                autojumpshotcheckbox.Enabled = true;
                //Auto Dropshot OFF code here
                MessageBox.Show("Auto Dropshot is Disabled!");
            }
        }



        private void aiminputdevicedropdownbox_SelectedIndexChanged(object sender, EventArgs e)
        {
            string selected = aiminputdevicedropdownbox.SelectedItem?.ToString();

            if (string.IsNullOrEmpty(selected) || selected == "Select input device...")
            {
                inputdevicelabel.Text = "No input device detected";
                inputdevicelabel.ForeColor = Color.Red;
            }
            else
            {
                inputdevicelabel.Text = selected;
                inputdevicelabel.ForeColor = Color.LimeGreen;
            }

        }

        private void TrackBar1_Scroll(object sender, EventArgs e)
        {
            opacitytextlabel.Text = playerboxopacitytrackbar.Value.ToString();
            inputdevicelabel.Text = aiminputdevicedropdownbox.SelectedItem.ToString();
        }

        private void autojumpshotcheckbox_CheckedChanged(object sender, EventArgs e)
        {
            if (autojumpshotcheckbox.Checked)
            {
                autodropshotcheckbox.Enabled = false;
                //Auto Jumpshot ON code here
                MessageBox.Show("Auto Jumpshot is Enabled");
            }
            else
            {
                autodropshotcheckbox.Enabled = true;
                //Auto Jumpshot OFF code here
                MessageBox.Show("Auto Jumpshot is Disabled");
            }
        }

        private void startknoxbutton_Click(object sender, EventArgs e)
        {
            loginscreen.Show();
            startknoxbutton.Hide();
        }

        private void backbutton_Click(object sender, EventArgs e)
        {
            loginscreen.Hide();
            startknoxbutton.Show();
        }

        private void autopingenemiescheckbox_CheckedChanged(object sender, EventArgs e)
        {
            if (autopingenemiescheckbox.Checked)
            {
                //Auto Ping Enemies ON code here
                MessageBox.Show("Auto Ping Enemies is Enabled");
            }
            else
            {
                //Auto Ping Enemies OFF code here
                MessageBox.Show("Auto Ping Enemies is Disabled");
            }
        }
    }
}
