using System;
using System.Diagnostics;
using System.Net.Http;
using System.Threading.Tasks;
using System.Linq;
using System.Diagnostics.Eventing.Reader;
//using System.Management; // Add via Project > Add Reference if needed
using System.Timers;
using Timer = System.Windows.Forms.Timer;
using System.Net.NetworkInformation;
using SharpDX.XInput; // Include SharpDX.XInput to handle controller input
using System.Collections.Generic;
using System.Runtime.InteropServices;
using static System.Windows.Forms.VisualStyles.VisualStyleElement;
using System.Windows.Forms;
using System.Diagnostics;
using SledgeOverlay;
using System.Text.Json;
using Nefarius.ViGEm.Client;
using Nefarius.ViGEm.Client.Targets;
using Nefarius.ViGEm.Client.Targets.Xbox360;

using System;
using System.IO;
using System.Linq;
using System.Runtime.InteropServices;
using System.Windows.Forms;
using System.Collections.Generic;
using Newtonsoft.Json;



public class PlayerData
{
    public int X { get; set; }
    public int Y { get; set; }
    public int Width { get; set; }
    public int Height { get; set; }
    public float Distance { get; set; }
    public bool Visible { get; set; }
}

public enum MouseEventFlags : uint
{
    MOVE = 0x0001
}

// Simulated controller state (you'll need to hook this into actual controller input logic)
public struct ControllerState
{
    public byte LeftTrigger;
}


namespace Sledge
{
    public partial class Form1 : Form
    {

        private DateTime lastJsonTime = DateTime.MinValue;
        private TimeSpan maxStaleTime = TimeSpan.FromMilliseconds(1000); // 1 second max before reset

        private CheckBox aimbotCheckbox;
        private RadioButton controllerAimRadioButton;

        [DllImport("user32.dll")]
        private static extern void mouse_event(MouseEventFlags flags, int dx, int dy, uint data, UIntPtr extraInfo);

        private void MoveMouse(float dx, float dy)
        {
            mouse_event(MOUSEEVENTF_MOVE, (uint)dx, (uint)dy, 0, UIntPtr.Zero);
        }
        private string currentTargetKey = null;

        private Controller controller;
        private State controllerState;


        private ViGEmClient vigem;
        private IXbox360Controller virtualController;


        private bool isAimbotActive = false;
        private System.Windows.Forms.Timer aimbotTimer;
        private float aimbotSensitivity = 0.08f; // default speed
        private enum AimControlMode
        {
            Controller,
            Mouse
        }

        private AimControlMode aimControlMode = AimControlMode.Controller;
        private enum AimbotTargetZone
        {
            Head,
            Body,
            ClosestToCrosshair
        }

        private AimbotTargetZone aimbotTargetZone = AimbotTargetZone.Body;

        [DllImport("user32.dll")]
        static extern short GetAsyncKeyState(int vKey);

        const int VK_RBUTTON = 0x02; // Right mouse button


        private System.Windows.Forms.Timer pythonHealthTimer;
        private string detectionPath;

        Process pythonOverlayProcess;
        private OverlayForm overlay;

        //Rainbow Background----------------------------
        private System.Windows.Forms.Timer rainbowTimer;
        private int hue = 0;

        //Drag Logo--------------------------------------------------------------------------
        private delegate IntPtr LowLevelKeyboardProc(int nCode, IntPtr wParam, IntPtr lParam);
        private static LowLevelKeyboardProc _proc;
        private static IntPtr _hookID = IntPtr.Zero;

        private const int WH_KEYBOARD_LL = 13;
        private const int WM_KEYDOWN = 0x0100;

        //DLLs--------------------------------------------------------------------------------------------------------------

        [DllImport("user32.dll")]
        public static extern bool ReleaseCapture();

        [DllImport("user32.dll")]
        public static extern int SendMessage(IntPtr hWnd, int Msg, int wParam, int lParam);

        public const int WM_NCLBUTTONDOWN = 0xA1;
        public const int HTCAPTION = 0x2;

        [DllImport("user32.dll")]
        private static extern IntPtr SetWindowsHookEx(int idHook, LowLevelKeyboardProc lpfn, IntPtr hMod, uint dwThreadId);

        [DllImport("user32.dll")]
        private static extern bool UnhookWindowsHookEx(IntPtr hhk);

        [DllImport("user32.dll")]
        private static extern IntPtr CallNextHookEx(IntPtr hhk, int nCode, IntPtr wParam, IntPtr lParam);

        [DllImport("kernel32.dll")]
        private static extern IntPtr GetModuleHandle(string lpModuleName);

        [DllImport("user32.dll")]
        static extern void mouse_event(uint dwFlags, uint dx, uint dy, uint dwData, UIntPtr dwExtraInfo);

        const uint MOUSEEVENTF_MOVE = 0x0001;


        public Form1()
        {
            InitializeComponent();

            //To be able to drag menu across screen from top bar
            EnableDrag(topmenubar);
            EnableDrag(bottommenubar);
            EnableDrag(sledgelogo);
            EnableDrag(togglelabel1);
            EnableDrag(togglelabel2);

            //Stuff for ESC toggle
            _proc = HookCallback;
            _hookID = SetHook(_proc);
        }

        private void EnableDrag(Control control)
        {
            control.MouseDown += (s, e) =>
            {
                if (e.Button == MouseButtons.Left)
                {
                    ReleaseCapture();
                    SendMessage(this.Handle, WM_NCLBUTTONDOWN, HTCAPTION, 0);
                }
            };
        }



        private void Form1_Load(object sender, EventArgs e)
        {

            aimcontrolmodedropdown.SelectedIndex = 0; // Default to Controller
            aimcontrolmodedropdown.SelectedIndexChanged += aimcontrolmodedropdown_SelectedIndexChanged;


            controller = new Controller(UserIndex.One); // Use Player 1


            aimbotonoffbutton.BackColor = Color.Red;
            aimbotonoffbutton.Text = "Off";

            aimbotTimer = new System.Windows.Forms.Timer();
            aimbotTimer.Interval = 15; // adjust for smoother aim (lower = faster)
            aimbotTimer.Tick += aimbotTimer_Tick;


            //Check for crash---------------------------------------------------------------------------------
            detectionPath = Path.Combine(AppDomain.CurrentDomain.BaseDirectory, "detections.json");

            pythonHealthTimer = new System.Windows.Forms.Timer();
            pythonHealthTimer.Interval = 10000; // checks super fast
            pythonHealthTimer.Tick += PythonHealthTimer_Tick;
            pythonHealthTimer.Start();


            //Rainbow background flashing----------------------------------------
            rainbowTimer = new System.Windows.Forms.Timer();
            rainbowTimer.Interval = 50; // Speed of color change (lower = faster)
            rainbowTimer.Tick += RainbowTimer_Tick;
            rainbowTimer.Start();

            //Disable aimbot default-----------------
            legitaimbotbutton.Enabled = false;
            extremeaimbotbutton.Enabled = false;
            headonlyaimbotbutton.Enabled = false;
            bodyonlyaimbotbutton.Enabled = false;
            closesttocrosshairaimbotbutton.Enabled = false;

            //Right Shift Flashing White and Black
            timer1.Interval = 1000; // 1 second
            timer1.Tick += timer1_Tick;
            timer1.Start();

            //Screen Detect Overlay--------------------
            overlay = new OverlayForm();
            overlay.Show();
            string exeFolder = AppDomain.CurrentDomain.BaseDirectory;
            string pythonScript = Path.Combine(exeFolder, "sledge_object_detection.py");


            pythonOverlayProcess = new Process();
            pythonOverlayProcess.StartInfo.FileName = "python"; // Use just 'python' so it uses PATH
            pythonOverlayProcess.StartInfo.Arguments = $"\"{pythonScript}\"";
            pythonOverlayProcess.StartInfo.UseShellExecute = false;
            pythonOverlayProcess.StartInfo.CreateNoWindow = true;
            pythonOverlayProcess.Start();

            //Controller Input/Output----------------------------
            vigem = new ViGEmClient();
            virtualController = vigem.CreateXbox360Controller();
            virtualController.Connect();


        }

        //Aimbot stuff---------------------------------------------------------------------------




        private void aimbotTimer_Tick(object sender, EventArgs e)
        {
            if (!aimbotCheckbox.Checked) return;

            // Get real controller input
            Controller controller = new Controller(UserIndex.One);
            if (!controller.IsConnected) return;

            State controllerState = controller.GetState();
            byte leftTrigger = controllerState.Gamepad.LeftTrigger;

            bool useController = controllerAimRadioButton.Checked;
            bool isAiming =
                (useController && leftTrigger == 255) ||
                (!useController && Control.MouseButtons.HasFlag(MouseButtons.Right));

            if (!isAiming) return;

            string jsonPath = Path.Combine(AppDomain.CurrentDomain.BaseDirectory, "players.json");
            if (!File.Exists(jsonPath)) return;

            string json = File.ReadAllText(jsonPath);
            List<PlayerData> players = JsonConvert.DeserializeObject<List<PlayerData>>(json);

            if (players == null || players.Count == 0) return;

            players = players.OrderBy(p => p.Distance).ToList();

            PlayerData target = players.FirstOrDefault(p => p.Visible);
            if (target == null) return;

            int centerX = Screen.PrimaryScreen.Bounds.Width / 2;
            int centerY = Screen.PrimaryScreen.Bounds.Height / 2;

            int targetX = target.X + target.Width / 2;
            int targetY = target.Y + target.Height / 2;

            int deltaX = targetX - centerX;
            int deltaY = targetY - centerY;

            mouse_event(MouseEventFlags.MOVE, deltaX, deltaY, 0, UIntPtr.Zero);
        }





        private void SendRightStickInput(short x, short y)
        {
            if (virtualController != null)
            {
                virtualController.SetAxisValue(Xbox360Axis.RightThumbX, x);
                virtualController.SetAxisValue(Xbox360Axis.RightThumbY, y);
                virtualController.SubmitReport();
            }
        }



        private void AimAt(int targetX, int targetY)
        {
            int screenX = Screen.PrimaryScreen.Bounds.Width / 2;
            int screenY = Screen.PrimaryScreen.Bounds.Height / 2; // use center, not bottom!

            int dx = targetX - screenX;
            int dy = targetY - screenY;

            short aimX = (short)Math.Clamp(dx * aimbotSensitivity, -32767, 32767);
            short aimY = (short)Math.Clamp(dy * aimbotSensitivity, -32767, 32767);

            if (aimControlMode == AimControlMode.Controller)
            {
                SendRightStickInput(aimX, aimY);
            }
            else if (aimControlMode == AimControlMode.Mouse)
            {
                MoveMouse(dx * aimbotSensitivity, dy * aimbotSensitivity);
            }
        }







        //Right Shift Toggle----------------------------------------------------------------------------
        private static IntPtr SetHook(LowLevelKeyboardProc proc)
        {
            using (Process curProcess = Process.GetCurrentProcess())
            using (ProcessModule curModule = curProcess.MainModule)
            {
                return SetWindowsHookEx(WH_KEYBOARD_LL, proc, GetModuleHandle(curModule.ModuleName), 0);
            }
        }

        private IntPtr HookCallback(int nCode, IntPtr wParam, IntPtr lParam)
        {
            if (nCode >= 0 && wParam == (IntPtr)WM_KEYDOWN)
            {
                int vkCode = Marshal.ReadInt32(lParam);
                if ((Keys)vkCode == Keys.RShiftKey)
                {
                    this.Invoke((MethodInvoker)delegate
                    {
                        if (this.WindowState == FormWindowState.Minimized)
                        {
                            this.WindowState = FormWindowState.Normal;
                            this.Show();
                            this.Activate();
                        }
                        else
                        {
                            this.WindowState = FormWindowState.Minimized;
                        }


                    });
                }
            }
            return CallNextHookEx(_hookID, nCode, wParam, lParam);

            //Alt Aimbot toggle code



        }

        //Crash check------------------------------------------------------------------------------------------
        private void PythonHealthTimer_Tick(object sender, EventArgs e)
        {
            string jsonPath = Path.Combine(AppDomain.CurrentDomain.BaseDirectory, "detections.json");

            // 1. Check if the file exists and when it was last written
            if (!File.Exists(jsonPath)) return;

            DateTime lastWrite = File.GetLastWriteTime(jsonPath);
            double secondsSinceUpdate = (DateTime.Now - lastWrite).TotalSeconds;

            // 2. If the file hasn't updated in 10+ seconds
            if (secondsSinceUpdate > 10)
            {
                try
                {
                    // Always try to kill the old Python process (even if still 'alive')
                    if (pythonOverlayProcess != null && !pythonOverlayProcess.HasExited)
                    {
                        pythonOverlayProcess.Kill();
                        pythonOverlayProcess.WaitForExit();
                    }

                    // 3. Start a new one
                    pythonOverlayProcess = new Process();
                    pythonOverlayProcess.StartInfo.FileName = "python";
                    pythonOverlayProcess.StartInfo.Arguments = $"\"{Path.Combine(AppDomain.CurrentDomain.BaseDirectory, "yolov8n_overlay_auto_path_json.py")}\"";
                    pythonOverlayProcess.StartInfo.UseShellExecute = false;
                    pythonOverlayProcess.StartInfo.CreateNoWindow = true;
                    pythonOverlayProcess.Start();

                    // Optional: Log or show notification
                    Console.WriteLine("⚠️ Python restarted at " + DateTime.Now);
                }
                catch (Exception ex)
                {
                    //  MessageBox.Show("Could not restart frozen Python script:\n" + ex.Message);
                }
            }

        }


        //Rainbow Background--------------------------------------------------------------
        private void RainbowTimer_Tick(object sender, EventArgs e)
        {
            this.BackColor = ColorFromHSV(hue, 1.0, 1.0); // Full saturation & brightness
            hue = (hue + 5) % 360; // Rotate hue (wraps at 360)
        }

        public static Color ColorFromHSV(double hue, double saturation, double value)
        {
            int hi = Convert.ToInt32(Math.Floor(hue / 60)) % 6;
            double f = hue / 60 - Math.Floor(hue / 60);

            value = value * 255;
            int v = Convert.ToInt32(value);
            int p = Convert.ToInt32(value * (1 - saturation));
            int q = Convert.ToInt32(value * (1 - f * saturation));
            int t = Convert.ToInt32(value * (1 - (1 - f) * saturation));

            return hi switch
            {
                0 => Color.FromArgb(255, v, t, p),
                1 => Color.FromArgb(255, q, v, p),
                2 => Color.FromArgb(255, p, v, t),
                3 => Color.FromArgb(255, p, q, v),
                4 => Color.FromArgb(255, t, p, v),
                _ => Color.FromArgb(255, v, p, q),
            };
        }

        //Right Shift Flashing Black and White-----------------
        private void timer1_Tick(object sender, EventArgs e)
        {
            if (togglelabel2.ForeColor == Color.White)
                togglelabel2.ForeColor = Color.Black;
            else
                togglelabel2.ForeColor = Color.White;
        }


        //Sledge Top Menu Bar----------------------------------------------------------------------------------------------------
        private void button7_Click(object sender, EventArgs e)
        {
            Application.Exit();
        }

        private void button8_Click(object sender, EventArgs e)
        {
            Application.Restart();
        }

        private void button9_Click(object sender, EventArgs e)
        {
            MessageBox.Show("*If you bought Sledge, your username is your Discord username! (not display name)*\r\n*Updated Usernames and Passwords take at least 3 minutes to update in the system!*\r\n*If there is an update, please delete this version and install the new one!*\r\n*You CANNOT use Sledge WITHOUT a Network Connection!*");
        }


        //++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
        //==========                       Sledge ALL 'modmenutab' Settings                           ==========
        //++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

        //Sledge 'Aimbot Settings'----------------------------------------------
        private void aimbotonoffbutton_Click(object sender, EventArgs e)
        {
            if (aimbotonoffbutton.BackColor == Color.Green)
            {
                aimbotonoffbutton.BackColor = Color.Red;
                aimbotonoffbutton.Text = "Off";

                //All Aimbot Off Code Here
                isAimbotActive = false;
                aimbotTimer.Stop(); // Stop the aimbot loop
            }
            else
            {
                //All Aimbot ON Code Here
                isAimbotActive = true;
                aimbotTimer.Start(); // Start the aimbot loop

                aimbotonoffbutton.Text = "On";
                aimbotonoffbutton.BackColor = Color.Green;
                legitaimbotbutton.Enabled = true;
                extremeaimbotbutton.Enabled = true;
                headonlyaimbotbutton.Enabled = true;
                bodyonlyaimbotbutton.Enabled = true;
                closesttocrosshairaimbotbutton.Enabled = true;
            }

            if (aimbotonoffbutton.BackColor == Color.Red)
            {
                //All Aimbot Off Code Here
                isAimbotActive = false;
                legitaimbotbutton.BackColor = Color.White;
                extremeaimbotbutton.BackColor = Color.White;
                headonlyaimbotbutton.BackColor = Color.White;
                bodyonlyaimbotbutton.BackColor = Color.White;
                legitaimbotbutton.Enabled = false;
                extremeaimbotbutton.Enabled = false;
                headonlyaimbotbutton.Enabled = false;
                bodyonlyaimbotbutton.Enabled = false;
                closesttocrosshairaimbotbutton.Enabled = false;
            }
        }


        private void legitaimbotbutton_Click(object sender, EventArgs e)
        {
            if (this.legitaimbotbutton.BackColor == Color.Green)
            {
                //Legit Aimbot OFF code here
                aimbotSensitivity = 0.08f;
                this.legitaimbotbutton.BackColor = Color.White;
                extremeaimbotbutton.Enabled = true;
            }
            else
            {
                //Legit Aimbot ON code here
                // Legit aim mode
                aimbotSensitivity = 0.04f;
                this.legitaimbotbutton.BackColor = Color.Green;
                extremeaimbotbutton.Enabled = false;
                this.extremeaimbotbutton.BackColor = Color.White;
            }
        }

        private void extremeaimbotbutton_Click(object sender, EventArgs e)
        {
            if (this.extremeaimbotbutton.BackColor == Color.Green)
            {
                //Extreme Aimbot OFF code here
                aimbotSensitivity = 0.08f;
                this.extremeaimbotbutton.BackColor = Color.White;
                legitaimbotbutton.Enabled = true;
            }
            else
            {
                //Extreme Aimbot ON code here
                // Instant aim mode
                aimbotSensitivity = 9999f;
                this.extremeaimbotbutton.BackColor = Color.Green;
                legitaimbotbutton.Enabled = false;
                this.legitaimbotbutton.BackColor = Color.White;
                MessageBox.Show("This option is extremely dangerous and can cause reports that will quickly lead to a ban!" +
                    " Use at your own risk.", "Sledge Alert!", MessageBoxButtons.OK, MessageBoxIcon.Warning);
            }
        }

        private void headonlyaimbotbutton_Click(object sender, EventArgs e)
        {
            if (this.headonlyaimbotbutton.BackColor == Color.Green)
            {
                //Head Only Aimbot OFF code here
                this.headonlyaimbotbutton.BackColor = Color.White;
                bodyonlyaimbotbutton.Enabled = true;
                closesttocrosshairaimbotbutton.Enabled = true;
            }
            else
            {
                //Head Only Aimbot ON code here
                aimbotTargetZone = AimbotTargetZone.Head;
                this.headonlyaimbotbutton.BackColor = Color.Green;
                bodyonlyaimbotbutton.Enabled = false;
                closesttocrosshairaimbotbutton.Enabled = false;
                this.bodyonlyaimbotbutton.BackColor = Color.White;
                this.closesttocrosshairaimbotbutton.BackColor = Color.White;
            }
        }

        private void bodyonlyaimbotbutton_Click(object sender, EventArgs e)
        {
            if (this.bodyonlyaimbotbutton.BackColor == Color.Green)
            {
                //Body Only Aimbot OFF code here
                this.bodyonlyaimbotbutton.BackColor = Color.White;
                headonlyaimbotbutton.Enabled = true;
                closesttocrosshairaimbotbutton.Enabled = true;
            }
            else
            {
                //Body Only Aimbot ON code here
                aimbotTargetZone = AimbotTargetZone.Body;
                this.bodyonlyaimbotbutton.BackColor = Color.Green;
                headonlyaimbotbutton.Enabled = false;
                this.headonlyaimbotbutton.BackColor = Color.White;
                closesttocrosshairaimbotbutton.Enabled = false;
                this.closesttocrosshairaimbotbutton.BackColor = Color.White;
            }
        }

        private void closesttocrosshairaimbotbutton_Click(object sender, EventArgs e)
        {
            if (this.closesttocrosshairaimbotbutton.BackColor == Color.Green)
            {
                //Closest to Crosshair Aimbot OFF code here
                this.closesttocrosshairaimbotbutton.BackColor = Color.White;
                headonlyaimbotbutton.Enabled = true;
                bodyonlyaimbotbutton.Enabled = true;
            }
            else
            {
                //Closest to Crosshair Aimbot ON code here
                aimbotTargetZone = AimbotTargetZone.ClosestToCrosshair;
                this.closesttocrosshairaimbotbutton.BackColor = Color.Green;
                headonlyaimbotbutton.Enabled = false;
                this.headonlyaimbotbutton.BackColor = Color.White;
                bodyonlyaimbotbutton.Enabled = false;
                this.bodyonlyaimbotbutton.BackColor = Color.White;
            }
        }


        //Sledge 'Extras'------------------------------------------------------------------
        private void showcrosshaircheckbox_CheckedChanged(object sender, EventArgs e)
        {
            if (overlay != null)
            {
                overlay.ShowCrosshair = showcrosshaircheckbox.Checked;
            }
        }

        private void autodropshotcheckbox_CheckedChanged(object sender, EventArgs e)
        {
            if (autodropshotcheckbox.Checked)
            {
                autojumpshotcheckbox.Enabled = false;
                //Auto Dropshot ON code here

            }
            else
            {
                autojumpshotcheckbox.Enabled = true;
                //Auto Dropshot OFF code here

            }
        }

        private void autojumpshotcheckbox_CheckedChanged(object sender, EventArgs e)
        {
            if (autojumpshotcheckbox.Checked)
            {
                autodropshotcheckbox.Enabled = false;
                //Auto Jumpshot ON code here

            }
            else
            {
                autodropshotcheckbox.Enabled = true;
                //Auto Jumpshot OFF code here

            }
        }

        private void triggerbotcheckbox_CheckedChanged(object sender, EventArgs e)
        {
            if (triggerbotcheckbox.Checked)
            {
                //Triggerbot ON code here.
                //(If you hold down the right trigger on your controller, tiggerbot will continously press the right trigger as fast as possible until right trigger input is released.)

            }
            else
            {
                //Triggerbot OFF code here

            }
        }

        private void autopingenemiescheckbox_CheckedChanged(object sender, EventArgs e)
        {
            if (autopingenemiescheckbox.Checked)
            {
                //Auto Ping Enemies ON code here

            }
            else
            {
                //Auto Ping Enemies OFF code here

            }
        }

        private void sledgediscordbutton_Click(object sender, EventArgs e)
        {
            Process.Start(new ProcessStartInfo
            {
                FileName = "https://discord.gg/PJYdXXnYKu",
                UseShellExecute = true
            });
        }


        //Sledge 'Sledge Settings'--------------------------------------------------
        private void lowopacity_Click(object sender, EventArgs e)
        {
            this.Opacity = 0.25;
        }

        private void mediumopacity_Click(object sender, EventArgs e)
        {
            this.Opacity = 0.50;
        }

        private void higheropacity_Click(object sender, EventArgs e)
        {
            this.Opacity = 0.75;
        }

        private void fullopacity_Click(object sender, EventArgs e)
        {
            this.Opacity = 1.0;
        }

        private void playerboxcolordropdownbox_SelectedIndexChanged(object sender, EventArgs e)
        {
            modmenutab.Focus();
            if (overlay == null) return;

            string selected = playerboxcolordropdownbox.SelectedItem?.ToString();

            if (selected == "Flashing Rainbow")
            {
                overlay.RainbowPlayerBox = true;
            }
            else
            {
                overlay.RainbowPlayerBox = false;
                switch (selected)
                {
                    case "Red":
                        overlay.PlayerBoxColor = Color.Red;
                        break;
                    case "Yellow":
                        overlay.PlayerBoxColor = Color.Yellow;
                        break;
                    case "Blue":
                        overlay.PlayerBoxColor = Color.Blue;
                        break;
                    case "Purple":
                        overlay.PlayerBoxColor = Color.Purple;
                        break;
                    default:
                        overlay.PlayerBoxColor = Color.Red;
                        break;
                }
            }

            overlay.Invalidate(); // force redraw
        }

        private void resetallsettingsbutton_Click(object sender, EventArgs e)
        {
            MessageBox.Show("Settings Reset to Default!", "Sledge Alert!", MessageBoxButtons.OK, MessageBoxIcon.Information);
        }

        private void saveallsettingsbutton_Click(object sender, EventArgs e)
        {
            MessageBox.Show("Settings Saved!", "Sledge Alert!", MessageBoxButtons.OK, MessageBoxIcon.Information);
        }


        //Sledge 'Enemy Detection Settings'------------------------------------------------------------
        private void showplayerboxbodycheckbox_CheckedChanged(object sender, EventArgs e)
        {
            if (overlay != null)
                overlay.ShowPlayers = showplayerboxcheckbox.Checked;
        }


        private void showvehiclescheckbox_CheckedChanged(object sender, EventArgs e)
        {
            if (overlay != null)
                overlay.ShowVehicles = showvehiclescheckbox.Checked;
        }

        private void showplayerlinecheckbox_CheckedChanged(object sender, EventArgs e)
        {
            if (overlay != null)
                overlay.ShowPlayerLines = showplayerlinecheckbox.Checked;
        }

        private void showvehiclelinecheckbox_CheckedChanged(object sender, EventArgs e)
        {
            if (overlay != null)
                overlay.ShowVehicleLines = showvehiclelinecheckbox.Checked;
        }

        protected override void OnFormClosing(FormClosingEventArgs e)
        {
            UnhookWindowsHookEx(_hookID);
            base.OnFormClosing(e);

            try
            {
                if (pythonOverlayProcess != null && !pythonOverlayProcess.HasExited)
                {
                    pythonOverlayProcess.Kill();
                    pythonOverlayProcess.Dispose();
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show("Could not close Python process: " + ex.Message);
            }
        }

        private void showfovcheckbox_CheckedChanged(object sender, EventArgs e)
        {
            if (overlay != null)
            {
                overlay.ShowFov = showfovcheckbox.Checked;
            }

        }

        private void fovradiusslider_Scroll(object sender, EventArgs e)
        {
            if (overlay != null)
            {
                overlay.FovRadius = fovradiusslider.Value;
            }
        }

        private void comboBox1_SelectedIndexChanged(object sender, EventArgs e)
        {
            modmenutab.Focus();
            if (overlay == null) return;

            string selected = fovcolorcombobox.SelectedItem?.ToString();

            if (selected == "Flashing Rainbow")
            {
                overlay.RainbowFov = true;
            }
            else
            {
                overlay.RainbowFov = false;
                switch (selected)
                {
                    case "Red":
                        overlay.FovColor = Color.Red;
                        break;
                    case "Yellow":
                        overlay.FovColor = Color.Yellow;
                        break;
                    case "Green":
                        overlay.FovColor = Color.Green;
                        break;
                    case "Cyan":
                        overlay.FovColor = Color.Cyan;
                        break;
                    case "Magenta":
                        overlay.FovColor = Color.Magenta;
                        break;
                    default:
                        overlay.FovColor = Color.White;
                        break;
                }
            }

            overlay.Invalidate(); // force redraw.Invalidate(); // 🔄 force update
        }

        private void showvehiclescheckbox_CheckedChanged_1(object sender, EventArgs e)
        {
            if (overlay != null)
                overlay.ShowVehicles = showvehiclescheckbox.Checked;
        }

        private void aimcontrolmodedropdown_SelectedIndexChanged(object sender, EventArgs e)
        {
            string selected = aimcontrolmodedropdown.SelectedItem.ToString();
            aimControlMode = selected == "Mouse" ? AimControlMode.Mouse : AimControlMode.Controller;
        }
    }
}
